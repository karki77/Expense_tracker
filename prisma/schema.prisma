generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Period {
  WEEKLY
  MONTHLY
  YEARLY
}

enum CategoryType {
  EXPENSE
  INCOME
  BOTH
}

model User {
  id                        String     @id @default(uuid())
  email                     String     @unique
  firstname                 String
  lastname                  String
  username                  String     @unique
  password                  String
  profile                   String?
  createdAt                 DateTime   @default(now())
  updatedAt                 DateTime   @updatedAt
  isVerified                Boolean    @default(false)
  verificationToken         String?
  verificationTokenExpires  DateTime?
  resetToken                String?
  resetTokenExpires         DateTime?
  refreshToken              String?
  expenses                  Expense[]
  incomes                   Income[]
  categories                Category[]
  userProfile               Profile?

  @@map("users")
}

model Profile {
  id                String   @id @default(uuid())
  userId            String   @unique
  firstname         String
  lastname          String
  username          String   @unique
  image             String
  totalExpenses     Float    @default(0)
  totalBudget       Float    @default(0)
  currentBalance    Float    @default(0)
  monthlyExpenses   Float    @default(0)
  monthlyBudget     Float    @default(0)
  monthlyBalance    Float    @default(0)
  isOverBudget      Boolean  @default(false)
  isUnderBudget     Boolean  @default(false)
  isOnBudget        Boolean  @default(false)
  topExpenses       Json?

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Expense {
  id          String    @id @default(uuid())
  name        String
  amount      Float
  description String?
  date        DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  categoryId  String

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category  @relation(fields: [categoryId], references: [id])

  @@map("expenses")
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  type        String    @default("expense") // Can be "expense", "income", or "both"
  color       String?   // Optional field to improve UI differentiation
  icon        String?   // Optional for visual representation
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses    Expense[]
  incomes     Income[]

  @@unique([name, userId])
  @@map("categories")
}

model Income {
  id            String    @id @default(uuid())
  amount        Float
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        String
  categoryId    String
  isRecurring   Boolean   @default(false)
  period        Period

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  category      Category  @relation(fields: [categoryId], references: [id])

  @@map("incomes")
}
